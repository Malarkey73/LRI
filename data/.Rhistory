heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=transcript[rownames(sigT)], margins=c(8,8), col=c('#CC3300', '#FFFFFF', '#6699CC'))
heatcols=c('#CC3300', '#F8F8FF', '#6699CC')
colorRampPalette(heatcols)
colorRampPalette(heatcols)(1:6)
colorRampPalette(heatcols)(8)
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=transcript[rownames(sigT)], margins=c(8,8), col=colorRampPalette(heatcols)(8))
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='r', labRow=transcript[rownames(sigT)], margins=c(8,8), col=colorRampPalette(heatcols)(8))
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=transcript[rownames(sigT)], margins=c(8,8), col=colorRampPalette(heatcols)(8))
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=transcript[rownames(sigT)], margins=c(8,8), col=colorRampPalette(heatcols)(6))
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=transcript[rownames(sigT)], margins=c(8,8), col=colorRampPalette(heatcols)(20))
transcript[wh]
cbind(1:27,transcript[wh])
length(wh)
cbind(1:18,transcript[wh])
sigT=cbind(fit.NF2$t[,1], fit.KdDen$t)
colnames(sigT)=c('Sparse[+NF2vsMUT]', fl)
sigT=sigT[,c(1,3,5)]
plot(sigT[,1], sigT[,2])
plot(sigT[,1], sigT[,3])
plot(sigT[,2], sigT[,3])
colnames(sigT)
ggpairs(sigT)
plotmatrix(sigT)
plotmatrix(as.data.frame(sigT))
p1 = qplot("Scr[DensevsSparse]", "Dense[-NF2vsScr]", data=sigT, xlim=c(-30,30), ylim=c(-30,30))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
sigT=data.frame(sigT)
p1 = qplot("Scr[DensevsSparse]", "Dense[-NF2vsScr]", data=sigT, xlim=c(-30,30), ylim=c(-30,30))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
p1
head(sigT)
colnames(sigT)=c('NF2readd', 'NF2knockout', 'Dense')
p1 = qplot(NF2readd, Dense, data=sigT, xlim=c(-30,30), ylim=c(-30,30))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
p1
p1 = qplot(Dense, NF2readd, data=sigT, xlim=c(-30,30), ylim=c(-30,30))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
p2 = qplot(Dense,NF2knockout, data=sigT, xlim=c(-30,30), ylim=c(-30,30))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
p3 = qplot(NF2readd, NF2knockout, data=sigT, xlim=c(-30,30), ylim=c(-30,30))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
grid.arrange(p1,p2,p3 ncol=3)
grid.arrange(p1,p2,p3, ncol=3)
p1 = qplot(Dense, NF2readd, data=sigT, xlim=c(-30,30), ylim=c(-30,30), alpha=I(0.5))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
p2 = qplot(Dense,NF2knockout, data=sigT, xlim=c(-30,30), ylim=c(-30,30), alpha=I(0.5))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
p3 = qplot(NF2readd, NF2knockout, data=sigT, xlim=c(-30,30), ylim=c(-30,30), alpha=I(0.5))+theme_bw()+geom_density2d()+geom_hline(yintercept=0, linetype=2)+geom_smooth(colour='red', size=2)+geom_smooth(method='lm', colour='red', linetype=2)
grid.arrange(p1,p2,p3, ncol=3)
q()
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
v= rnorm(100, 100,10)
v
fac=rep(c('A', 'B'), 50)
df=data.frame(v,fac)
library(ggplot2)
log(100)
log10(100)
log2(100)
qplot(fac,v, data=df)
qplot(fac,v, data=df, geom=boxplot)
qplot(fac,v, data=df, geom='boxplot')
theme_set(theme_bw())
qplot(fac,v, data=df, geom='boxplot')
qplot(fac,v, data=df, geom='boxplot', log='y')
qplot(fac,log10(v), data=df, geom='boxplot')
qplot(fac,v, data=df, geom='boxplot', log='y')
qplot(fac,log10(v), data=df, geom='boxplot')
qplot(fac,v, data=df, geom='boxplot')
qplot(fac,log(v), data=df, geom='boxplot')
qplot(fac,v, data=df, geom='boxplot', log='y')
v= rnorm(100, 100,10)
u= v+ rnorm(100,0,5)
u
v
plot(u,v)
df=data.frame(u,v,fac)
qplot(u,v, data=df)
qplot(u,v, data=df, log='xy')
qplot(u,v, data=df)
qplot(u,v, data=df, log='xy')
qplot(log(u),log(v), data=df)
qplot(u,v, data=df)+coord_trans(y='log')
qplot(u,v, data=df)+coord_trans(xy='log')
qplot(u,v, data=df)
qplot(u,v, data=df)+coord_trans(xy='log')
qplot(u,v, data=df)+coord_trans(y='log')
log(v)
rm(u,v)
library(Rcpp)
install.packages(c("coin", "DBI", "foreign", "RcppArmadillo"))
source('~/Desktop/Messing/fastqc.R')
dir()
Cluster <- read.delim("~/Desktop/Cluster.txt")
View(Cluster)
Cluster
lm(Value~Condition+Exp)
lm(Value~Condition+Exp, data=Cluster)
aov(lm(Value~Condition+Exp, data=Cluster))
summary(lm(Value~Condition+Exp, data=Cluster))
summary(lm(Value~Condition|Exp, data=Cluster))
summary(lm(Value~Condition*Exp, data=Cluster))
summary(aov(Value~Condition+Exp, data=Cluster))
summary.lm(aov(Value~Condition+Exp, data=Cluster))
summary(aov(Value~Condition+Exp, data=Cluster))
summary(aov(Value~Condition+Exp, data=Cluster))
?aov
getwd()
save.image('Ohad.RData')
x= 1:10
y=8:12
x|y
x= c(TRUE, FALSE, TRUE, FALSE, FALSE)
y= c(FALSE, FALSE, FALSE, FALSE, FALSE)
x|y
z= c(FALSE, FALSE, FALSE, FALSE, TRUE)
x|y|z
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
source('~/Dropbox/NF2new/hmap.R')
# from the sampletable these are the diff sample types in the NF2add hmap
respNF2wt=  c(1:2,7:8,13:14,19:20)
respNF2mut= c(3:4,9:10,15:16,21:22)
#these are the samples to be used in the hmap
thy=1:4
ren=7:10
men=13:16
bre=19:22
# these are the genes that are significantly different
NF2add.dt= decideTests(NF2add.fit, adjust.method='fdr', lfc=.585)
load("~/Dropbox/NF2new/Jan/JanNF2.RData")
library(affy)
R.Version()
NF2add.table
# the expression data
NF2add.exprs
# the limma fit
cl= as.factor(paste0(NF2add.table$cancer, NF2add.table$NF2status, NF2add.table$responsive_cell_line))
design=model.matrix(~cl-1)
colnames(design)=levels(cl)
NF2add.fit=lmFit(NF2add.exprs, design)
cm=makeContrasts(
non_resp=((thyNF2non_resp-thyMUTnon_resp)+(renNF2non_resp-renMUTnon_resp)+
(menNF2non_resp-menMUTnon_resp)+(breNF2non_resp-breMUTnon_resp))/4,
resp=((thyNF2resp-thyMUTresp)+(renNF2resp-renMUTresp)+
(menNF2resp-menMUTresp)+(breNF2resp-breMUTresp))/4,
levels=design)
NF2add.fit=contrasts.fit(NF2add.fit, cm)
NF2add.fit=eBayes(NF2add.fit)
rm(cm,cl,design)
cl= as.factor(paste0(NF2add.table$cancer, NF2add.table$NF2status, NF2add.table$responsive_cell_line))
design=model.matrix(~cl-1)
colnames(design)=levels(cl)
NF2addBre.fit=lmFit(NF2add.exprs, design)
cm=makeContrasts(breNF2non_resp-breMUTnon_resp,breNF2resp-breMUTresp, levels=design)
NF2addBre.fit=contrasts.fit(NF2addBre.fit, cm)
NF2addBre.fit=eBayes(NF2addBre.fit)
load("~/Dropbox/NF2new/Jan/JanNF2.RData")
library(reshape2)
library(ggplot2)
dt.none=melt(decideTests(NF2add.fit, lfc=.585, adjust.method='none'))
dt.fdr=melt(decideTests(NF2add.fit, lfc=.585, adjust.method='fdr'))
dt.none=cbind(adjustment='none',dt.none)
dt.fdr=cbind(adjustment='fdr',dt.fdr)
NF2add.dt=rbind(dt.none, dt.fdr)
NF2add.dt=NF2add.dt[with(NF2add.dt, value!=0),]
colnames(NF2add.dt)[4]='Count'
temp=as.factor(with(NF2add.dt, Count))
levels(temp)<-c('negative', 'positive')
NF2add.dt$direction=temp
rm(temp)
qplot(x= direction, y=Count, position='dodge', fill=direction, geom='histogram', data=NF2add.dt, facets=Contrasts~adjustment, stat='summary',fun.y='sum')+theme_bw()+scale_fill_grey()
library(gridExtra)
source('~/Dropbox/NF2new/hmap.R')
# from the sampletable these are the diff sample types in the NF2add hmap
respNF2wt=  c(1:2,7:8,13:14,19:20)
respNF2mut= c(3:4,9:10,15:16,21:22)
#these are the samples to be used in the hmap
thy=1:4
ren=7:10
men=13:16
bre=19:22
# these are the genes that are significantly different
library(limma)
NF2add.dt= decideTests(NF2add.fit, adjust.method='fdr', lfc=.585)
sig= which(NF2add.dt[,2] != 0)
# this is the matrix of data in the necessary order
mat=exprs(NF2add.exprs[sig,])
o1=order(rowMeans(mat[,respNF2wt])- rowMeans(mat[,respNF2mut]))
mat=mat[o1,]
thy.map= hmap2(mat[,thy], bins=5)
ren.map= hmap2(mat[,ren], bins=5)
men.map= hmap2(mat[,men], bins=5)
bre.map= hmap2(mat[,bre], bins=5)
grid.arrange(thy.map,ren.map,men.map,bre.map, ncol=4)
install.packages("zoo")
thy.map= hmap2(mat[,thy], bins=5)
ren.map= hmap2(mat[,ren], bins=5)
men.map= hmap2(mat[,men], bins=5)
bre.map= hmap2(mat[,bre], bins=5)
grid.arrange(thy.map,ren.map,men.map,bre.map, ncol=4)
thy.map
hmap2
bre.map
grid.arrange(thy.map,ren.map,men.map,bre.map, ncol=4)
NF2kd.dt= decideTests(NF2kd.fit, adjust.method='fdr', lfc=.585)
NF2kdinsparse.sig= which(NF2kd.dt[,1] != 0)
NF2kdindense.sig= which(NF2kd.dt[,2] != 0)
densevsparse_inNF2kd.sig= which(NF2kd.dt[,3] != 0)
densevsparse.sig= which(NF2kd.dt[,4] != 0)
mat1 = exprs(NF2kd.exprs[NF2kdinsparse.sig,])
o1=order(rowMeans(mat1[,3:4])-rowMeans(mat1[,1:2]))
mat1=mat1[o1,]
mat2 = exprs(NF2kd.exprs[NF2kdindense.sig,])
o2=order(rowMeans(mat2[,7:8])-rowMeans(mat2[,5:6]))
mat2=mat2[o2,]
mat3 = exprs(NF2kd.exprs[densevsparse_inNF2kd.sig,])
o3=order(rowMeans(mat3[,7:8])-rowMeans(mat3[,3:4]))
mat3=mat3[o3,]
mat4 = exprs(NF2kd.exprs[densevsparse.sig,])
o4=order(rowMeans(mat4[,5:6])-rowMeans(mat4[,1:2]))
mat4=mat4[o4,]
col_filler=matrix(NA,100,8)
M=rbind(mat4,col_filler,mat3, col_filler,mat2,col_filler, mat1)
hmap2(M, bins=5)
load("~/Dropbox/NF2new/Jan/JanNF2.RData")
NF2add.dt
dT=cbind(decideTests(NF2add.fit, lfc=.585, adjust.method='fdr'),decideTests(NF2kd.fit,lfc=.585, adjust.method='fdr'))
head(dT)
dT=dT[,c(2,4)]
head(dT)
apply(dT, any)
apply(dT, 1, any)
apply(dT, 1, function(x)any(x!=0))
which(apply(dT, 1, function(x)any(x!=0)))
which(apply(dT, 1, function(x)all(x!=0)))
colnames(dT) = c('NF2+', 'NF2-')
sig.wh=which(apply(dT, 1, function(x)all(x!=0)))
sigT=cbind(fit.NF2$t[sig.wh,2], fit.KdDen$t[sig.wh,2])
sigT=cbind(NF2add.fit$t[sig.wh,2], NF2kd.fit$t[sig.wh,2])
sigT
transcript[sig.wh]
reord= order(sigT[,1]-sigT[,2])
sigT=cbind(sigT[,1], rep(NA, nrow(sigT)),sigT[,2])
colnames(sigT)=c('NF2+','','NF2-')
library(gplots)
install.packages("gplots")
library(gplots)
heatcols=c('#6699CC','#F8F8FF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=transcript[rownames(sigT)],
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
sigT=cbind(fit.NF2$t[,1], fit.KdDen$t)
colnames(sigT)=c('Sparse[+NF2vsMUT]', fl)
sigT=sigT[wh,c(1,3,5)]
#reord=order(sigT[,1], sigT[,2], sigT[,3])
reord=order(sigT[,1]+sigT[,3]-sigT[,2])
sigT=sigT[reord,]
sigTransc= transcript[sig.wh]
dT=cbind(decideTests(NF2add.fit, lfc=.585, adjust.method='fdr'),decideTests(NF2kd.fit,lfc=.585, adjust.method='fdr'))
head(dT)
dT=dT[,c(2,4)]
# pick out the main contrasts
colnames(dT) = c('NF2+', 'NF2-')
sig.wh=which(apply(dT, 1, function(x)all(x!=0)))
sigT=cbind(NF2add.fit$t[sig.wh,2], NF2kd.fit$t[sig.wh,2])
sigTransc= transcript[sig.wh]
reord= order(sigT[,1]-sigT[,2])
sigT = sigT[reord,]
sigTransc=sigTransc[reord]
sigT=cbind(sigT[,1], rep(NA, nrow(sigT)),sigT[,2])
colnames(sigT)=c('NF2+','','NF2-')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
heatcols=c('#6699CC','#F8F8FF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20))
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
sigT=cbind(NF2add.fit$t[sig.wh,2], NF2kd.fit$t[sig.wh,2])
sigTransc= transcript[sig.wh]
# reorder sigT for plotting
reord= order(sigT[,1]-sigT[,2])
sigT = sigT[reord,]
sigTransc=sigTransc[reord]
# put a blank spacer column in for plotting
sigT=cbind(sigT[,1], rep(NA, nrow(sigT)),rep(NA, nrow(sigT)),rep(NA, nrow(sigT)),sigT[,2])
colnames(sigT)=c('NF2+','','NF2-')
heatcols=c('#6699CC','#F8F8FF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
sig.wh=which(apply(dT, 1, function(x)all(x!=0)))
sigT=cbind(NF2add.fit$t[sig.wh,2], NF2kd.fit$t[sig.wh,2])
sigTransc= transcript[sig.wh]
# reorder sigT for plotting
reord= order(sigT[,1]-sigT[,2])
sigT = sigT[reord,]
sigTransc=sigTransc[reord]
# put a blank spacer column in for plotting
sigT=cbind(sigT[,1], rep(NA, nrow(sigT)),rep(NA, nrow(sigT)),rep(NA, nrow(sigT)),sigT[,2])
colnames(sigT)=c('NF2+','','','','NF2-')
heatcols=c('#6699CC','#F8F8FF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
sig.wh=which(apply(dT, 1, function(x)all(x!=0)))
sigT=cbind(NF2add.fit$t[sig.wh,2], NF2kd.fit$t[sig.wh,2])
sigTransc= transcript[sig.wh]
# reorder sigT for plotting
reord= order(sigT[,1]-sigT[,2])
sigT = sigT[reord,]
sigTransc=sigTransc[reord]
# put a blank spacer column in for plotting
sigT=cbind( rep(NA, nrow(sigT)),sigT[,1],rep(NA, nrow(sigT)),sigT[,2],rep(NA, nrow(sigT)))
colnames(sigT)=c('','NF2+','','NF2-','')
heatcols=c('#6699CC','#F8F8FF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
length(sigTransc)
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(16), key=F)
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(10), key=F)
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20))
heatcols=c('#6699CC','#F8FFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20), key=F)
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(20))
colorRampPalette(heatcols)(20)
colorRampPalette(heatcols)(15)
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(15))
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(21))
colorRampPalette(heatcols)(21)
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(21), key=F)
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='r', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(21), key=F)
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(21), key=F)
dim(sigT)
load("~/Dropbox/NF2new/Jan/JanNF2.RData")
dT=cbind(decideTests(NF2add.fit, lfc=.585, adjust.method='fdr'),decideTests(NF2kd.fit,lfc=.585, adjust.method='fdr'))
head(dT)
dT=dT[,c(2,4)]
# pick out the main contrasts
colnames(dT) = c('NF2+', 'NF2-')
sig.wh=which(apply(dT, 1, function(x)all(x!=0)))
sigT=cbind(NF2add.fit$t[sig.wh,2], NF2kd.fit$t[sig.wh,2])
sigTransc= transcript[sig.wh]
# reorder sigT for plotting
reord= order(sigT[,1]-sigT[,2])
sigT = sigT[reord,]
sigTransc=sigTransc[reord]
# put a blank spacer column in for plotting
sigT=cbind( rep(NA, nrow(sigT)),sigT[,1],rep(NA, nrow(sigT)),sigT[,2],rep(NA, nrow(sigT)))
colnames(sigT)=c('','NF2+','','NF2-','')
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(21), key=F)
library(gplots)
heatcols=c('#6699CC','#FFFFFF','#CC3300')
heatmap.2(sigT, Colv=F, Rowv=F, trace='n', scale='n', labRow=sigTransc,
margins=c(8,8), col=colorRampPalette(heatcols)(21), key=F)
sigTransc
t(sigTransc)
cbind(1:92,sigTransc)
rm(list=ls())
load("~/Desktop/RonjonAug13/CEL/ron.RData")
library(limma)
R.Version()
sqrt(1272824)
45+6
q()
((12+(151/365))/80)*50000
((20+(151/365))/80)*50000
((30+(151/365))/80)*50000
((24+(151/365))/80)*50000
library(seqinR)
library(seqinr)
install.packages("seqinr")
?read.fasta
library(seqinr)
?read.fasta
q()
load("~/Dropbox/limmav2.RData")
topTable(fit)
summary(fit)
head(fit)
head(coef(fit))
setwd("~/Desktop/LRI")
library(devtools)
load_all()
contactFIle
dir()
setwd("~/Desktop/LRI/data")
dir()
contactFile= dir()[5]
contactsToSQLite(contactFile, DBname="mo1_mm10_liver500k.sqlite")
sqldf("ANALYZE Contact", dbname=DBname)
DBname="mo1_mm10_liver500k.sqlite"
sqldf("ANALYZE Contact", dbname=DBname)
dir()
bedFile=dir()[1]
dir()
contactFile= dir()[3]
contactsToSQLite(contactFile, DBname="mNSC.sqlite")
bedFile=dir()[1]
binFile=dir()[2]
DT = outerBedBins(bedFile, binFile)
source('~/Desktop/LRI/R/bedToGRanges.R')
source('~/Desktop/LRI/R/bedToBins.R')
source('~/Desktop/LRI/R/binToGRanges.R')
DT = outerBedBins(bedFile, binFile)
source('~/Desktop/LRI/R/bedToBins.R')
DT = outerBedBins(bedFile, binFile)
source('~/Desktop/LRI/R/bedToBins.R')
DT = outerBedBins(bedFile, binFile)
require(GenomicRanges)
require(IRanges)
require(data.table)
# [1] because data.table has dual data.frame data.table class
if(class(bed)[1] != "GRanges") bed = bedToGRanges(bed)
if(class(bins)[1] != "GRanges") bins = binToGRanges(bins)
debug(bedToBins)
DT = outerBedBins(bedFile, binFile)
debug(outerBedBins)
DT = outerBedBins(bedFile, binFile)
debug(bedToBins)
DT = outerBedBins(bedFile, binFile)
debug(bedToBins)
bed
bins
class(bed)
class(bed)[1]
bed
bins
seqnames(bed)
as.vector(seqnames(bed))
as.vector(GenomicRanges::seqnames(bed))
seqnames(bed)
class(seqnames(bed))
as.vector(IRanges::seqnames(bed))
?seqnames
seqnames(bed)
unlist(seqnames(bed))
seqnames(bed)[[1]]
seqnames(bed)$values
seqnames(bed)@values
seqnames(bed)@lengths
as.vector(seqnames(bed))
as.factor(seqnames(bed))
seqnames(bed)
methods(seqnames(bed))
getMethods(seqnames(bed))
findMethods(seqnames(bed))
findMethods('Rle')
vectorORfactor(seqnames(bed))
library(GenomicRanges)
as.vector(seqnames(bed))
class(seqnames(bed))
as.vectorORfactor(seqNames(bed))
library(IRanges)
as.vectorORfactor(seqNames(bed))
as.character(seqNames(bed))
as.character(seqnames(bed))
load_all()
setwd("~/Desktop/LRI")
load_all()
DT = outerBedBins(bedFile, binFile)
setwd("~/Desktop/LRI/data")
DT = outerBedBins(bedFile, binFile)
debug(outerBedBins)
DT = outerBedBins(bedFile, binFile)
bedbin.dt
bedbin.dt[[2]]
bedbin.dt[[1]]
bedbin.dt
tail(bedbin.dt)
data.table
DT = outerBedBins(bedFile, binFile)
bedbin.dt= bedToBins(bed, bins)
undebug(bedToBins)
bedToBins(bedFile, binFile)
summary(bedToBins)
bedbin.dt=bedToBins(bedFile, binFile)
summary(bedbin.dt)
summary(bedbin.dt$chr)
summary(as.factor(bedbin.dt$chr))
source('~/.active-rstudio-document')
bedbin.dt=bedToBins(bedFile, binFile)
summary(bedbin.dt)
bedbin.dt = group_by(bedbin.dt, chr)
# perhaps this outer fun can be speed up?? The unique will cut memory overhead whilst the loop proceeds
outerFun= function(dt)
{
unique(data.table(
x=dt[rep(1:nrow(dt),each =nrow(dt)),],
y=dt[rep(1:nrow(dt),times=nrow(dt)),]))
}
# terrible name brilliant result - though a list??
outer.bedbin.dt = do(bedbin.dt, outerFun)
outer.bedbin.dt
outer.bedbin.dt[[1]]
outer.bedbin.dt=rbindlist(outer.bedbin.dt)
# we only want to query distances within an Nbase window - this should cut it down further
outer.bedbin.dt = outer.bedbin.dt[abs(x.start-y.start) < window,]
window=1e7
outer.bedbin.dt = outer.bedbin.dt[abs(x.start-y.start) < window,]
outer.bedbin.dt
