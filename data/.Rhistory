sapply(bin.df.list, nrow)^2
sum(sapply(bin.df.list, nrow)^2)
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
cbind(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
options(stringsAsFactors = FALSE)
chr.table.list=lapply(bin.df.list, data.table)
outerFun = function(chr.table)cbind(chr.table[rep(1:nrow(chr.table),each =nrow(chr.table)),],
chr.table[rep(1:nrow(chr.table),times=nrow(chr.table)),])
test=outerFun(chr.table.list[1])
test=outerFun(chr.table.list[[1]])
head(test)
dim(test)
dim(unique(test))
test=outerFun(chr.table.list[[2]])
dim(unique(test))
dim(test)
duplicated(test)
test
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
# "chr1" should be 1 like in other files.. grrrr...
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
bedFile=dir()[1]
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
nrows(bed)
nrow(bed)
nrow(bed)^2
100^2
(nrow(bed)/20)^2)*20
((nrow(bed)/20)^2)*20
test=chr.table.list[[1]]
rep(1:nrow(test), each= nrow(test))
nrow(test)
2065^2
length(rep(1:nrow(test), each= nrow(test)))
length(rep(1:nrow(test), times= nrow(test)))
rep(1:nrow(test), times= nrow(test))
unique(rep(1:nrow(test), times= nrow(test)))
test
unique(test)
chr.table.list=lapply(bin.df.list, function(b.df.l)unique(data.table(b.df.l))
)
rm(bin.sel, bed.split.ir)
rm(chr.df.list)
test = lappy(chr.table.list, outerFun)
test=outerFun(chr.table.list[[1]])
nrow(test)
test
nrow(unique(test))
colnames(test)=c("cbin1", "start1", "site1", "cbin2", "start2", "site2")
?data.table
outerFun2= function(chr.table)data.table(x=chr.table[rep(1:nrow(chr.table),each =nrow(chr.table)),],
y=chr.table[rep(1:nrow(chr.table),times=nrow(chr.table)),])
test=outerFun2(chr.table.list[[1]])
test
nrow(test)
nrow(unique(test))
test[,x.start]
test[,range(x.start, y.start)]
chr.table.list[[1]]
chr.table.list[[1]]$start[1:5]
bedFile=dir()[1]
ls()
dir()
binFile=dir()[2]
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
# "chr1" should be 1 like in other files.. grrrr...
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
#Process the BIN data
bins = read.table(binFile, header=T, colClasses=c('numeric','character', rep('numeric',3)))
rm(bedFile, binFile)
# I split these up into a list of tables per chromosome
bed.split=split(bed, bed$chr)
bin.split=split(bins, bins$chr)
#tidy
rm(bed, bins)
bed.split[[1]]
bed.split[[1]]$start
bed.split[[1]][1:5,]
bed.split[[1]]$bedStart
bed.split.ir=sapply(bed.split,
function(spl)
IRanges(start=spl$bedStart, end=spl$bedEnd, names=spl$siteType)
)
bin.split.ir=sapply(bin.split,
function(spl)
IRanges(start=spl$from.coord, end=spl$to.coord, names=spl$cbin)
)
#tidy
rm(bed.split, bin.split)
bed.split.ir
bed.split.ir[[1]]
start(bed.split.ir[[1]])
nearfun= function(bed.ir,bin.ir) nearest(bed.ir,bin.ir)
nearest.wh = mapply(nearfun, bed.split.ir, bin.split.ir)
bin.sel= mapply(FUN=function(bsi,nw) {bsi[nw,]},
bin.split.ir, nearest.wh)
head(bin.sel)
start(bin.sel[[1]])
rm(nearfun, nearest.wh, bin.split.ir)
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
cbind(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
chr.df.list[[1]]
chr.table.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
data.table(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
chr.table.list[[1]]
chr.table.list
bin.sel
bin.sel[[1]]
start(bin.sel[[1]])
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
data.frame(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
chr.df.list[[1]]
chr.df.list
chr.df.list[1]
chr.df.list[[1]]
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
data.frame(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
chr.df.list
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
cbind(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
chr.df.list[[1]]
test= chr.df.list
test2=chr.df.list[[1]]
sapply(test, class)
sapply(test2, class)
lapply(test2, class)
test2
apply(test2[,1:2], 2, class)
apply(test2[,1:2], 2, as.integer)
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
temp=cbind(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
temp[,1:2]=as.integer(temp[,1:2])
temp
},
bin.sel, bed.split.ir)
chr.df.list[[1]]
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
temp=cbind(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
temp=data.frame(temp)
temp[,1:2]=as.integer(temp[,1:2])
temp
},
bin.sel, bed.split.ir)
test2
as.data.frame(test2)
as.integer(as.data.frame(test2)[,1:2])
as.integer(as.data.frame(test2)[,1])
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
temp=cbind(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
temp=data.frame(temp)
temp[,1]=as.integer(temp[,1])
temp[,2]=as.integer(temp[,2])
temp
},
bin.sel, bed.split.ir)
chr.df.list[[1]]
chr.df.list[[2]]
chr.df.list
chr.df.list= mapply(FUN=function(bin.sel, bed.split.ir)
{
data.table(bin= names(bin.sel),start=start(bin.sel),site=names(bed.split.ir))
},
bin.sel, bed.split.ir)
chr.df.list
names(bin.sel[[1]])
ls()
bedFile=dir()[1]
binFile=dir()[2]
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
# "chr1" should be 1 like in other files.. grrrr...
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
#Process the BIN data
bins = read.table(binFile, header=T, colClasses=c('numeric','character', rep('numeric',3)))
rm(bedFile, binFile)
# I split these up into a list of tables per chromosome
bed.split=split(bed, bed$chr)
bin.split=split(bins, bins$chr)
#tidy
rm(bed, bins)
# I create an IRange of beds and bins for each chromosome
bed.split.ir=sapply(bed.split,
function(spl)
IRanges(start=spl$bedStart, end=spl$bedEnd, names=spl$siteType)
)
bin.split.ir=sapply(bin.split,
function(spl)
IRanges(start=spl$from.coord, end=spl$to.coord, names=spl$cbin)
)
bin.split.ir[[1]]
bin.split[[1]]
bin.split[[1]][1:5,]
bin.split[[1]]$cbin
?IRanges
rm(bed.split, bin.split)
# multivariate nested apply
nearfun= function(bed.ir,bin.ir) nearest(bed.ir,bin.ir)
nearest.wh = mapply(nearfun, bed.split.ir, bin.split.ir)
bin.sel= mapply(FUN=function(bsi,nw) {bsi[nw,]},
bin.split.ir, nearest.wh)
?IRanges
?GRanges
library(GenomicRanges)
?GRanges
bedFile=dir()[1]
binFile=dir()[2]
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
# "chr1" should be 1 like in other files.. grrrr...
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
head(bed)
bed.gr= GRanges(seqnames=bed$chr,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$siteType)
)
bed.gr
head(bed)
bed.gr= GRanges(seqinfo=bed$chr,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bed.gr= GRanges(seqinfo=bed$siteType,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr)
head(bed)
bed.gr= GRanges(seqinfo=bed$siteType,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bed.gr= GRanges(seqnames=bed$siteType,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bed.gr
bed.gr= GRanges(seqnames=bed$siteType,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bins = read.table(binFile, header=T, colClasses=c('numeric','character', rep('numeric',3)))
head(bins)
bin.gr= GRanges(seqnames=bins$cbin,  IRanges(start=bins$from.coord, end=bins$to.coord, names=bins$chr))
?nearest
test=nearest(bed.gr, bin.gr)
class(test)
length(test)
nrow(bed.gr)
bed.gr
bin.gr
test[1]
test[2]
head(test)
test
bed.gr
test=nearest(bed.gr, bed.gr)
test
head(bin.gr)
head(bed.gr)
bed.gr= GRanges(seqnames=bed$chr,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bin.gr= GRanges(seqnames=bins$chr,  IRanges(start=bins$from.coord, end=bins$to.coord, names=bins$chr))
test=nearest(bed.gr, bed.gr)
test
test=nearest(bed.gr, bin.gr)
test
head(bed)
bed.gr= GRanges(seqnames=bed$siteType,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bin.gr= GRanges(seqnames=bins$cbin,  IRanges(start=bins$from.coord, end=bins$to.coord, names=bins$chr))
bed.gr
bin.gr
length(test)
bed.gr= GRanges(seqnames=bed$siteType,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$chr))
bin.gr= GRanges(seqnames=bins$cbin,  IRanges(start=bins$from.coord, end=bins$to.coord, names=bins$chr))
nearest.wh=nearest(bed.gr, bin.gr)
bed.gr= GRanges(seqnames=bed$chr,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$siteType))
bin.gr= GRanges(seqnames=bins$chr,  IRanges(start=bins$from.coord, end=bins$to.coord, names=bins$cbin))
nearest.wh=nearest(bed.gr, bin.gr)
rm(test)
bin.gr[nearest.wh]
names(bin.gr[nearest.wh])
bedbin.dt = data.table(bin = names(bin.gr[nearest.wh]), start=start(bin.gr[nearest.wh]),site=names(bed.gr))
head(bedbin.dt)
bedbin.dt = data.table(bin = names(bin.gr[nearest.wh]), start=start(bin.gr[nearest.wh]),site=names(bed.gr), chr=seqnames(bed.gr))
head(bedbin.dt)
bedbin.dt
seqnames(bed.gr)
as.vector(seqnames(bed.gr))
bedbin.dt = data.table(bin = names(bin.gr[nearest.wh]), start=start(bin.gr[nearest.wh]),site=names(bed.gr), chr=as.vector(seqnames(bed.gr)))
bedbin.dt
32138^2
?GRanges
?DT
?data.table
bedbin.dt[,mean(start), by=chr]
bedbin.dt[length(chr),, by=chr]
bedbin.dt
devtools::install_github("assertthat")
devtools::install_github("dplyr")
install.packages("Rcpp")
devtools::install_github("dplyr")
library(dplyr)
bedbin.dt2 = group_by(bedbin.dt, chr)
bedbin.dt2
?do
nrow(bedbin.dt)
outerFun= function(dt)
{
data.table(
x=dt[rep(1:nrow(dt),each =nrow(dt)),],
y=dt[rep(1:nrow(dt),times=nrow(dt)),])
}
test = do(bedbin.dt2, outerFun)
nrow(test)
class(test)
head(test[[1]])
head(test[[2]])
ls()
rm(list=ls()[-15])
gc()
nrow(test[[1]])
lapply(test, nrow)
sum(lapply(test, nrow))
sum(sapply(test, nrow))
rm(test)
gc()
dir()
bedFile=dir()[1]
binFile=dir()[2]
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
# "chr1" should be 1 like in other files.. grrrr...
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
#Process the BIN data
bins = read.table(binFile, header=T, colClasses=c('numeric','character', rep('numeric',3)))
rm(bedFile, binFile)
bed.gr= GRanges(seqnames=bed$chr,  IRanges(start=bed$bedStart, end=bed$bedEnd, names=bed$siteType))
bin.gr= GRanges(seqnames=bins$chr,  IRanges(start=bins$from.coord, end=bins$to.coord, names=bins$cbin))
nearest.wh=nearest(bed.gr, bin.gr)
bedbin.dt = data.table(bin = names(bin.gr[nearest.wh]), start=start(bin.gr[nearest.wh]),site=names(bed.gr), chr=as.vector(seqnames(bed.gr)))
bedbin.dt = group_by(bedbin.dt, chr)
rm(nearest.wh,bin.gr,bed.gr)
outerFun= function(dt)
{
unique(data.table(
x=dt[rep(1:nrow(dt),each =nrow(dt)),],
y=dt[rep(1:nrow(dt),times=nrow(dt)),]))
}
test = do(bedbin.dt, outerFun)
sum(sapply(test, nrow))
test[[1]]
test[[1]]$x.bin
test[[1]]$x.start
test[[1]]
test[[2]]
test[[1]][abs(x.start-y.start)<1000,]->test2
test2
test[[1]][abs(x.start-y.start)<10000,]->test2
test2
test[[1]][abs(x.start-y.start)<100000,]->test2
test2
test[[1]][abs(x.start-y.start)<1000000,]->test2
test2
test[[1]]
test[[1]][abs(x.start-y.start)<10000000,]->test2
test2
Nbase =1e7
Nbase
lapply(nrow, test)
lapply( test, nrow)
sapply( test, nrow)
sum(sapply( test, nrow))
outer.bedbin.dt.list=test
rm(test)
outer.bedbin.dt.list= lapply(outer.bedbin.dt.list, function(dt) dt[abs(x.start-y.start)<Nbase,])
sum(sapply(outer.bed.bin.list, nrow))
sum(sapply(outer.bedbin.dt.list, nrow))
?rbind
?data.table
?rbindlist
outer.bedbin.dt=rbindlist(outer.bedbin.dt.list)
outer.bedbin.dt
source('~/.active-rstudio-document')
source('~/Desktop/LRI/R/temp.R')
dir()
bedFile=dir()[1]
binFile=dir()[2]
Nbase=1e7
source('~/.active-rstudio-document')
dt
DT
DT= outerBedBins(bedFile, binFile, Nbase=5e6)
system.time(DT= outerBedBins(bedFile, binFile, Nbase=1e7))
system.time((DT= outerBedBins(bedFile, binFile, Nbase=1e7)))
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric'))
nrow(bed)
rm(bed)
bins = read.table(binFile, header=T, colClasses=c('numeric','character', rep('numeric',3)))
nrow(bins)
DT
50441^2
?do
bed=read.table(bedFile, colClasses=c('character', 'numeric', 'numeric', 'character'))
# "chr1" should be 1 like in other files.. grrrr...
colnames(bed)=c('chr', 'bedStart', 'bedEnd', 'siteType')
bed$chr= gsub('chr', '', bed$chr)
head(bed)
head(bins)
?join
?manip
?do
source('~/Desktop/LRI/R/bedToGranges.R')
bedToGranges(bed)
bedToGRanges(bed)
head(bed)
dim(bed)
bedToGRanges(bed)
bed.GR=bedToGRanges(bed)
bed.GR
bed.GR=bedToGRanges(bed)
?GRanges
source('~/.active-rstudio-document')
bin.GR=binToGRanges(bins)
bin.GR
nrow(bins)
is.GRanges(bin.GR)
?GRanges
class(GRanges)
class(bin.GR)
class(bin.GR)=="GRanges"
class(bin)=="GRanges"
test=bedTobins(bed,bins)
source('~/Desktop/LRI/R/bedTobins.R')
test=bedTobins(bed,bins)
source('~/.active-rstudio-document')
test=bedTobins(bed,bins)
test
test=bedTobins(bedFile,binFile)
test
test=bedTobins(data.table(bed),data.table(bins))
test
rm(test)
test=bedTobins(data.table(bed),data.table(bins))
test
class(data.table(bed))
source('~/.active-rstudio-document')
test=bedTobins(data.table(bed),data.table(bins))
source('~/Desktop/LRI/R/bedTobins.R')
source('~/Desktop/LRI/R/binToGRanges.R')
source('~/Desktop/LRI/R/bedToGRanges.R')
source('~/Desktop/LRI/R/outerBedBins.R')
test=outerBedBins(bed, bins)
source('~/Desktop/LRI/R/outerBedBins.R')
test=outerBedBins(bed.GR, bin.GR)
rm(DT)
system.time((test=outerBedBins(bedFile, binFile)))
system.time((test=outerBedBins(bed, bins)))
system.time((test=outerBedBins(bed.GR, bin.GR)))
source('~/.active-rstudio-document')
DBname=contact.sqlite
DBname="contact.sqlite"
"attach 'contact.sqlite' as new"
paste("attach", 'contact.sqlite', "as new")
paste("attach", "\'contact.sqlite\'", "as new")
DBname
paste("attach", "\'",DBname, "\'", "as new")
paste0("attach", "\'",DBname, "\'", "as new")
paste0("attach ", "\'",DBname, "\'", " as new")
library(sqldf)
install.packages("sqldf")
require(sqldf)
source('~/Desktop/LRI/R/contactsToSQLite.R')
dir()
dir()[3]->contactFile
source('~/.active-rstudio-document')
contactsToSQLite(contactFile, DBname="mo1_mm10_liver_500000.sqlite")
sqldf("SELECT * FROM Contact WHERE cbin1 < 100")
sqldf("SELECT * FROM Contact WHERE cbin1 < 100", dbname=DBname)
DBname="mo1_mm10_liver_500000.sqlite"
sqldf("SELECT * FROM Contact WHERE cbin1 < 100", dbname=DBname)
sqldf("SELECT * FROM Contact WHERE cbin1 < 1000", dbname=DBname)
library(microbenchmark)
?microbenchmark
microbenchmark(sqldf("SELECT * FROM Contact WHERE cbin1 < 1000", dbname=DBname))
source('~/.active-rstudio-document')
fun1=function(sqldf("SELECT * FROM Contact WHERE cbin1 < 1000", dbname=DBname))
fun1=function()sqldf("SELECT * FROM Contact WHERE cbin1 < 1000", dbname=DBname)
microbenchmark(fun1)
source('~/.active-rstudio-document')
contactsToSQLite(contactFile, DBname="mo1_mm10_liver_500000.sqlite", Analyse=TRUE)
microbenchmark(fun1)
contactsToSQLite(contactFile, DBname="mo1_mm10_liver_500000.sqlite", Analyse=TRUE)
microbenchmark(fun1)
contactsToSQLite(contactFile, DBname="mo1_mm10_liver_500000.sqlite", Analyse=FALSE)
microbenchmark(fun1)
source('~/Desktop/LRI/R/binToGRanges.R')
source('~/Desktop/LRI/R/bedToBins.R')
source('~/Desktop/LRI/R/bedToGRanges.R')
source('~/Desktop/LRI/R/outerBedBins.R')
dir()
dir()[1]->bedFile
dir()[2]->binFile
outer.bedbin = bedToBins(bedFile, binFile)
outer.bedbin
outer.bedbin = outerBedBins(bedFile, binFile)
